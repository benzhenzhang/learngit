2016/12/22 leaning git

git指令
$ git add file 						#添加文件
$ git commit -m "" 					#添加备注 完成文件提交
$ git status  						#查看仓库当前状态
$ git diff file 					#查看文件修改内容

$ git log 							#查看提交的日志
$ git log --pretty=oneline 			#以每次一行的方式显示提交的日志
$ git reset --hard HEAD^ 			#返回上一次提交的版本 上上个版本HEAD^^  很多个版本之前的HEAD~num
$ cat file 							#查看文件内容
$ git reset --hard commit_id  		#返回到某个版本
$ git reflog 						#查看命令历史
$ git diff HEAD -- file				#查看file在工作区和版本库里的区别
Git的工作区和暂存区
就是你在电脑里能看到的目录，比如我的User文件夹就是一个工作区
版本库（Repository） 工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，
还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

我们把文件往Git版本库里添加的时候，是分两步执行的：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。
因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，
现在，git commit就是往master分支上提交更改。

可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。

$ git commit -m ""  只提交暂存区的内容   没有add的文件内容不会提交
可以继续git add再git commit，也可以别着急提交第一次修改，先git add第二次修改，
再git commit，就相当于把两次修改合并后一块提交了

$ git checkout -- file   			# -- 很重要!!!!没有--，就变成了“切换到另一个分支”的命令
把file在工作区的修改全部撤销，这里有两种情况：
一种是file自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是file已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。

当修改内容并提交到暂存区之后,想要删除该修改
$ git reset HEAD file 				#可以把暂存区的修改撤销掉（unstage），重新放回工作区 HEAD表示最新版本
然后再次时候$ git checkout -- file 将工作区的修改丢弃

版本回退是有条件的  就是不能把自己的本地版本推送到远程库

$ git log 退出按q

$ rm file  							#删除文件 如果删错 可用$ git checkout -- file 从版本库中恢复
									 git checkout其实是用版本库里的版本替换工作区的版本，无论工作
									 区是修改还是删除，都可以“一键还原”。
$ git rm file						#从版本库中删除该文件 并且git commit提交
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，
你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。

$ ssh-keygen -t rsa -C "youremail@example.com"  #创建SHH Key
$ git remote add origin git@github.com:benzhenzhang/learngit.git  #关联远程仓库 
																  第一次关联会有warning 用于确认是否连接github
																  连接后远程库的名字就是origin
$ git push -u origin master   		#第一次推送master分支时使用
$ git push origin master			#推送本地修改

$ git clone git@github.com:benzhenzhang/gitskills.git 	  #还可以用https://github.com/michaelliao/gitskills.git

分支管理
	创建分支
$ git checkout -b branch_name  		#创建分支
									  相当于两条git指令 $ git branch dev 
													    $ git checkout dev
$ git branch 						#列出所有分支
$ git merge branch_name				#将指定的分支合并到当前分支	
$ git branch -d branch_name			#删除分支	
	解决冲突
当主线与分支共同修改同个文件的同处地方 提交合并时 git只能试图把各自的修改合并起来
只有在解决了冲突之后才能提交
$ git log --graph					#查看分支合并图  参数--pretty=oneline --abbrev-commit

	分支管理策略
通常合并分支时,如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息
$ git merge --no-ff -m "" branch_name   #采取禁用Fast forward模式合并分支(公司开发时使用)

在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，
再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
	Bug分支
在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，
修复后，合并分支，然后将临时分支删除。
当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101
来修复它，但是，等等，当前正在dev上进行的工作还没有提交,可以用git提供的stash功能 可以把当前工作
现场“储藏”起来，等以后恢复现场后继续工作
$ git stash							#保存当前工作内容
$ git stash list					#查看保存的stash
$ git stash apply stash@{num}		#恢复之前保存的stash
$ git stash drop stash@{num}		#删除stash
$ git stash pop						#恢复的同时也一起删除了stash

2016/12/23 learning git2
	Feature分支
开发新功能时 应创建新分支  如果要取消这个功能,删除此分支需要以下指令
$git branch -D branch_name  		#D注意与-d的区别  D强行删除 丢弃一个未合并过的分支
	多人协作
从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin
$ git remote						#查看远程库信息
$ git remote -v						#查看远程库详细信息
$ git push origin master			#将master分支推送到远程库对应的master分支
	master分支是主分支，因此要时刻与远程同步；
	dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
	bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
	feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
抓取分支
$ git pull							#抓取分支
$ git branch --set-update dev origin/dev  #在未与远程库连接时需要配置本地dev分支与远程origin/dev分支的连接

因此，多人协作的工作模式通常是这样：
首先，可以试图用git push origin branch-name推送自己的修改；
如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
如果合并有冲突，则解决冲突，并在本地提交；
没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！

	标签管理
发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，
取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。
Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），
所以，创建和删除标签都是瞬间完成的。方便查找定位
	创建标签
切换到需要打标签的分支上
$ git tag <tag_name>				#创建新标签 默认打在最新提交的commit上的 标签是按字母排序的
$ git tag							#查看所有标签
$ git tag <tag_name> <commit_id>	#指定一个commit打上标签
$ git show <tag_name>				#查看标签的详细信息
$ git tag -a <tag_name> -m "version 0.1 released" <commit_id>  #创建带有说明的标签，用-a指定标签名，-m指定说明文字
$ git tag -s v0.2 -m "signed version 0.2 released" fec145a  #通过-s用私钥签名一个标签 必须首先安装gpg（GnuPG）
	操作标签
$ git tag -d <tag_name>				#删除标签
$ git push origin <tag_name>		#推送标签到远程
$ git push origin --tags			#将本地的全部标签推送到远程
如果标签已经推送到了远程,想要删除标签则需要:
$ git tag -d <tag_name>				#先删除本地标签
$ git push origin :refs/tags/<tag_name>    #再删除远程标签

git配置
$ git config --global alias.<别名> <要替代的字段名>    #为字段添加别名
